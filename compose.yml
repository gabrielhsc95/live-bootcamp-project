services:
  nginx:
    image: nginx:mainline-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./data/certbot/www:/var/www/certbot:ro
      - ./data/certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - app-service
      - auth-service
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./data/certbot/www:/var/www/certbot:rw
      - ./data/certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  app-service:
    image: gabrielhsc95/app-service
    restart: "always"
    environment:
      AUTH_SERVICE_IP: ${AUTH_SERVICE_IP:-auth-service}
    depends_on:
      auth-service:
        condition: service_started
    networks:
      - app-network

  auth-service:
    image: gabrielhsc95/auth-service
    restart: "always"
    networks:
      - app-network
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DROPLET_IP: ${DROPLET_IP}
      DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432"
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN}
      ENV_NAME: ${ENV_NAME}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network

volumes:
  postgres:
    driver: local

networks:
  app-network:
    driver: bridge
