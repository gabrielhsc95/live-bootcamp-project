# Add these lines for a complete, valid configuration
user  nginx;
worker_processes  auto;
pid /var/run/nginx.pid;

# The events block is required for Nginx to start
events {
    worker_connections  1024;
}

# Your http block goes inside the main context
http {
    # This server block handles the certificate challenge and redirects all
    # HTTP traffic to HTTPS.
    server {
        listen 80;
        listen [::]:80;
        server_name bootcamp.gabuzando.dev;

        # This location block is required by Certbot to validate your domain.
        location ~ /.well-known/acme-challenge {
            allow all;
            # This path must match the volume mount in your compose file
            root /var/www/certbot;
        }

        # This redirects all other HTTP requests to their HTTPS equivalent.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # This server block handles all HTTPS traffic and proxies it to your services.
    server {
        # Updated syntax for http2
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name bootcamp.gabuzando.dev;

        # These are the paths to the SSL certificate and key generated by Certbot.
        ssl_certificate /etc/letsencrypt/live/bootcamp.gabuzando.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/bootcamp.gabuzando.dev/privkey.pem;

        # Recommended SSL settings for modern security.
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256';
        ssl_prefer_server_ciphers off;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

        location = / {
            return 404;
        }

        # Proxy pass for the main app service
        location /app/ {
            rewrite /app/(.*) /$1 break;
            proxy_pass http://app-service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy pass for the auth service
        location /auth/ {
            rewrite /auth/(.*) /$1 break;
            proxy_pass http://auth-service:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}