name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SQLX_OFFLINE: true

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.2-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            app-service/.cargo
            app-service/target/
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        run: rustup update stable && rustup default stable

      - name: Build and test app-service code
        working-directory: ./app-service
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Build and test auth-service code
        working-directory: ./auth-service
        env:
          JWT_SECRET: "placeholder_for_testing"
          DROPLET_IP: "127.0.0.1" # placeholder_for_testing
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432
          LOGFIRE_TOKEN: ${{ secrets.LOGFIRE_TOKEN }}
        run: |
          echo "Checking for PostgreSQL service health..."
          for i in $(seq 1 10); do
              pg_isready -h postgres -U postgres && break
              sleep 5
          done
          cargo build --verbose
          cargo test --verbose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/bake-action@v2.3.0
        with:
          push: true
          files: |
            compose.yml
            compose.override.yml
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy project files to droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          source: "."
          target: "/root/gabuzando_bootcamp_app"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd /root/gabuzando_bootcamp_app
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export DROPLET_IP=${{ vars.DROPLET_IP }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export LOGFIRE_TOKEN=${{ secrets.LOGFIRE_TOKEN }}
            docker compose down -v --remove-orphans
            docker compose pull
            docker compose up -d